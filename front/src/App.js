import React, { useState, useRef, useEffect } from 'react';
import './App.css'

const API_ENDPOINT = `${process.env.REACT_APP_API_URL}/upload`;

const AUTO_DETECT_INTERVAL_MS = 500;

function SimpleImageUploader() {
    const [capturedBlob, setCapturedBlob] = useState(null); 
    const [status, setStatus] = useState('‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'); 
    const [isCameraActive, setIsCameraActive] = useState(false); 
    const [isAutoDetecting, setIsAutoDetecting] = useState(false);
    const [predictionMessage, setPredictionMessage] = useState(null); 
    const [predictedImageBase64, setPredictedImageBase64] = useState(null); 
    const [isSending, setIsSending] = useState(false); 
    const [modelName, setModelName] = useState('new'); 
    
    const videoRef = useRef(null); 
    const canvasRef = useRef(null); 
    const streamRef = useRef(null); 
    const autoDetectIntervalRef = useRef(null);

    const stopCamera = () => {
        stopAutoDetect(); 
        if (streamRef.current) {
            streamRef.current.getTracks().forEach(track => track.stop());
            streamRef.current = null;
        }
        setIsCameraActive(false);
    };

    const startCamera = async () => {
        stopCamera();
        setCapturedBlob(null); 
        setPredictionMessage(null); 
        setPredictedImageBase64(null); 
        
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: { exact: ["environment", "user", "left", "right"] } }, audio: false });
            streamRef.current = stream;
            
            if (videoRef.current) {
                videoRef.current.srcObject = stream;
            }
            setIsCameraActive(true);
            setStatus('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß üì∑');
        } catch (err) {
            setStatus(`‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${err.message}`);
        }
    };
    
    const stopAutoDetect = () => {
        if (autoDetectIntervalRef.current) {
            clearInterval(autoDetectIntervalRef.current);
            autoDetectIntervalRef.current = null;
        }
        setPredictedImageBase64(null)
        setIsAutoDetecting(false);
        if (isCameraActive) {
             setStatus('‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ üõë');
        }
    };

    const startAutoDetect = () => {
        if (!isCameraActive) {
            setStatus('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Auto Detect');
            return;
        }
        stopAutoDetect(); 
        setIsAutoDetecting(true);
        setStatus(`‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (${1000 / AUTO_DETECT_INTERVAL_MS} FPS) üöÄ`);

        // ‡∏ï‡∏±‡πâ‡∏á Interval ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ã‡πâ‡∏≥‡πÜ
        autoDetectIntervalRef.current = setInterval(() => {
            takeAndSendPhoto(true);
        }, AUTO_DETECT_INTERVAL_MS);
    };

    const takeAndSendPhoto = async (isAuto = false, fileToUpload = null) => {
        let file;

        // 1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û/‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå
        if (fileToUpload) {
            file = fileToUpload;
        } else if (isAuto || isCameraActive) {
            const video = videoRef.current;
            const canvas = canvasRef.current;
            
            if (!video || !canvas || isSending) {
                // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà
                return;
            }
            
            // ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Video ‡∏•‡∏á Canvas
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
            
            // ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô Canvas ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå (Blob/File)
            const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/jpeg', 0.95));
            file = new File([blob], "captured_image.jpeg", { type: "image/jpeg" });
            
            // ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Manual, ‡πÄ‡∏ã‡πá‡∏ï capturedBlob ‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
            if (!isAuto) {
                setCapturedBlob(file);
                stopCamera();
                setStatus('‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢...');
            }

        } else if (capturedBlob) {
            file = capturedBlob;
        } else {
            return;
        }

        setIsSending(true);
        if (!isAuto) {
             setPredictionMessage(null);
        }
       
        const formData = new FormData();
        formData.append('file', file, file.name); 
        formData.append('model', modelName); 

        try {
            const response = await fetch(API_ENDPOINT, {
                method: 'POST',
                body: formData,
            });

            const result = await response.json();

            if (response.ok) {
                if (result.predicted_image) {
                    setPredictedImageBase64(result.predicted_image); 
                    if (result.msg === "Found object") {
                        setPredictionMessage(`‡πÄ‡∏à‡∏≠‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô`)
                    } else {
                        setPredictionMessage(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô`)
                    }
                } else {
                    setPredictedImageBase64(result.predicted_image);
                    setPredictionMessage(`‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏û‡∏ö`);
                }
                if (!isAuto) setStatus('‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ');
            } else {
                setPredictedImageBase64(null);
                setPredictionMessage(null);
                setStatus(`‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.error || response.statusText}`);
            }
        } catch (error) {
            setPredictedImageBase64(null);
            setPredictionMessage(null);
            setStatus(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Server ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${error.message}`);
        } finally {
            setIsSending(false);
            if (isAuto && isAutoDetecting) {
                setStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥... (${new Date().toLocaleTimeString()})`);
            }
        }
    };

    const handleFileUpload = (event) => {
        stopCamera()
        const file = event.target.files[0];
        if (file) {
            stopCamera();
            setCapturedBlob(file);
            setPredictionMessage(null); 
            setPredictedImageBase64(null); 
            setStatus(`‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á: ${file.name}`);
        }
    };
    
    const takePhotoManual = () => {
        stopAutoDetect();
        if (isCameraActive) {
            takeAndSendPhoto(false);
        }
    }

    const sendImageToBackendManual = () => {
         takeAndSendPhoto(false, capturedBlob);
    }

    const handleSelectModel = (event) => {
        setModelName(event.target.value);
    };
    
    useEffect(() => {
        return () => {
            stopCamera();
            stopAutoDetect();
        };
    }, []);
    
    const previewUrl = capturedBlob ? URL.createObjectURL(capturedBlob) : null;
    
    const predictedImageUrl = predictedImageBase64 
        ? `data:image/png;base64,${predictedImageBase64}` 
        : null;
 
    return (
        <div className="container-sm rounded">
            <h1 className="bg-light text-center text-body">‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h1>

            <p className="text-start text-body">
                <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> {status} {isSending ? '(‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...)': ''}
            </p>
            <div className="w-100">
                <label className="text-start text-body">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Model:</label>
                <select 
                    value={modelName} 
                    onChange={handleSelectModel} 
                    disabled={isSending || isAutoDetecting}
                    className="form-select"
                >
                    <option value="new">Augmented</option>
                    <option value="old">No Augment</option>
                </select>
            </div>

            {/*upload file*/}
            <h2 className="text-body">1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå</h2>
            <div class="input-group">
                <input 
                    type="file" 
                    accept="image/*" 
                    onChange={handleFileUpload}
                    className="form-control"
                    aria-label="Upload"
                />
            </div>
            
            {/*Camera and option*/}
            <h2 className="text-body">2. ‡∏Å‡∏•‡πâ‡∏≠‡∏á & Auto Detect</h2>
            <div className="w-100">
                <button 
                    onClick={isCameraActive ? stopCamera : startCamera} 
                    className={isCameraActive ? 'btn btn-success' : 'btn btn-danger'}
                >
                    {isCameraActive ? '‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á üî¥' : '‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á üì∑'}
                </button>

                {isCameraActive && (
                    <button 
                        onClick={isAutoDetecting ? stopAutoDetect : startAutoDetect} 
                        className={isAutoDetecting ? 'btn btn-warning' : 'btn btn-warning'}
                    >
                        {isAutoDetecting ? '‡∏´‡∏¢‡∏∏‡∏î Auto Detect üî¥' : '‡πÄ‡∏£‡∏¥‡πà‡∏° Auto Detect üöÄ'}
                    </button>
                )}
                
                {isCameraActive && !isAutoDetecting && (
                    <button 
                        onClick={takePhotoManual} 
                        className="btn btn-secondary"
                    >
                        ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û üñºÔ∏è
                    </button>
                )}
            </div>
            
            
            <div className="w-100">
                {/* show video camera */}
                <video 
                    ref={videoRef} 
                    autoPlay
                    playsInline={true}
                    className={`${isCameraActive && !isAutoDetecting ? 'show w-100' : 'hidden w-100'}`}
                />
                {/*prediction result*/}
                {(predictedImageUrl && isAutoDetecting) && (
                <div className="w-100">
                    {predictedImageUrl && (
                        <>
                            <img 
                                src={predictedImageUrl} 
                                alt="Predicted Image" 
                                className="w-100"
                            />
                        </>
                    )}


                    {predictionMessage && <p className=""><strong>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:</strong> {predictionMessage}</p>}
                </div>
                )}
                {(predictedImageUrl && !isAutoDetecting && !isCameraActive) && (
                <div className="w-100">
                    {predictedImageUrl && (
                        <>
                            <img 
                                src={predictedImageUrl} 
                                alt="Predicted Uploaded Image" 
                                className="w-100"
                            />
                        </>
                    )}


                    {predictionMessage && <p className="text-body text-start"><strong>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ : </strong> {predictionMessage}</p>}
                </div>
                )}
            </div>
            {previewUrl && !predictedImageUrl && !isAutoDetecting && ( 
                <div className="w-100">
                    <img 
                        src={previewUrl} 
                        alt="Image Preview" 
                        className="w-100"
                    />
                    <button 
                        onClick={sendImageToBackendManual} 
                        disabled={isSending || !capturedBlob}
                        className="btn btn-primary"
                    >
                        {isSending ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏• (Manual) üì§'}
                    </button>
                </div>
            )}
            <canvas ref={canvasRef} style={{ display: 'none' }} />
        </div>
    );
}

export default SimpleImageUploader;
