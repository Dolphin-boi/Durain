import React, { useState, useRef} from 'react';
import './App.css';

// Endpoint ‡∏Ç‡∏≠‡∏á Flask Backend
// const API_ENDPOINT = 'https://91e9f88adc26.ngrok-free.app//upload'
const API_ENDPOINT = 'http://127.0.0.1:5000/upload'

function SimpleImageUploader() {
    // 1. ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (State)
    const [capturedBlob, setCapturedBlob] = useState(null); 
    const [status, setStatus] = useState('‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'); 
    const [isCameraActive, setIsCameraActive] = useState(false); 
    const [predictionMessage, setPredictionMessage] = useState(null); 
    const [predictedImageBase64, setPredictedImageBase64] = useState(null); // <--- State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Base64 String ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
    const [isSending, setIsSending] = useState(false); 
    const [modelName, setModelName] = useState('new'); 

    // 2. ‡∏ï‡∏±‡∏ß‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (Ref)
    const videoRef = useRef(null); 
    const canvasRef = useRef(null); 
    const streamRef = useRef(null); 

    // ----------------------------------------------------------------------
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
    // ----------------------------------------------------------------------

    const stopCamera = () => {
        if (streamRef.current) {
            streamRef.current.getTracks().forEach(track => track.stop());
            streamRef.current = null;
        }
        setIsCameraActive(false);
    };

    const startCamera = async () => {
        stopCamera();
        setCapturedBlob(null); 
        setPredictionMessage(null); 
        setPredictedImageBase64(null); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
            streamRef.current = stream;
            
            if (videoRef.current) {
                videoRef.current.srcObject = stream;
            }
            setIsCameraActive(true);
            setStatus('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß üì∑');
        } catch (err) {
            setStatus(`‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${err.message}`);
        }
    };

    // ----------------------------------------------------------------------
    // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢ (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà)
    // ----------------------------------------------------------------------

    const handleFileUpload = (event) => {
        const file = event.target.files[0];
        if (file) {
            stopCamera();
            setCapturedBlob(file);
            setPredictionMessage(null); 
            setPredictedImageBase64(null); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            setStatus(`‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á: ${file.name}`);
        }
    };

    const takePhoto = () => {
        const video = videoRef.current;
        const canvas = canvasRef.current;
        
        if (!video || !canvas) return;

        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
        
        canvas.toBlob((blob) => {
            const file = new File([blob], "captured_image.jpeg", { type: "image/jpeg" });
            setCapturedBlob(file);
            stopCamera();
            setPredictionMessage(null); 
            setPredictedImageBase64(null); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            setStatus('‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á üñºÔ∏è');
        }, 'image/jpeg', 0.95);
    };

    // ----------------------------------------------------------------------
    // ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend: ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö Base64 Image
    // ----------------------------------------------------------------------

    const sendImageToBackend = async () => {
        if (!capturedBlob) return;

        setIsSending(true);
        setStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û...');
        setPredictionMessage(null);
        setPredictedImageBase64(null);

        const formData = new FormData();
        formData.append('file', capturedBlob, capturedBlob.name); 
        formData.append('model', modelName); 

        try {
            const response = await fetch(API_ENDPOINT, {
                method: 'POST',
                body: formData,
            });

            const result = await response.json();

            if (response.ok) {
                setStatus(`‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ`);
                
                // *** ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Base64 Image ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Backend ***
                if (result.predicted_image) {
                    setPredictedImageBase64(result.predicted_image); // ‡πÄ‡∏Å‡πá‡∏ö Base64 string
                    setPredictionMessage('‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏! ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                } else if (result.prediction === "No object detected") {
                    setPredictionMessage(result.prediction);
                } else {
                    setPredictionMessage(result.msg || '‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå');
                }

            } else {
                setStatus(`‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.error || response.statusText}`);
                setPredictionMessage(null);
            }
        } catch (error) {
            setStatus(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Server ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${error.message}`);
            setPredictionMessage(null);
        } finally {
            setIsSending(false);
        }
    };

    const handleSelectModel = (event) => {
        setModelName(event.target.value);
    };
    
    // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á)
    const previewUrl = capturedBlob ? URL.createObjectURL(capturedBlob) : null;
    
    // ** ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á Base64 string ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Data URL **
    const predictedImageUrl = predictedImageBase64 
        ? `data:image/png;base64,${predictedImageBase64}` 
        : null;

    // ----------------------------------------------------------------------
    // 4. ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (Render): ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
    // ----------------------------------------------------------------------
    
    return (
        <div className='Main'>
            <h1>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏û (YOLO React)</h1>
            <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> {status}</p>
            <hr />

            <h2>1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå</h2>
            <input 
                type="file" 
                accept="image/*" 
                onChange={handleFileUpload}
                disabled={isCameraActive || isSending}
            />

            <hr />

            <h2>2. ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á</h2>
            <button onClick={isCameraActive ? stopCamera : startCamera} disabled={isSending}>
                {isCameraActive ? '‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á' : '‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á'}
            </button>
            
            {isCameraActive && (
                <button onClick={takePhoto} disabled={isSending}>
                    ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
                </button>
            )}

            <div style={{ marginTop: '10px' }}>
                <video 
                    ref={videoRef} 
                    autoPlay 
                    style={{ 
                        width: isCameraActive ? '100%' : '0', 
                        maxWidth: '400px',
                        display: isCameraActive ? 'block' : 'none',
                        border: '1px solid black' 
                    }}
                />
            </div>

            <canvas ref={canvasRef} style={{ display: 'none' }} />

            <hr />

            <h2>3. ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á & ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>
            <select value={modelName} onChange={handleSelectModel}>
                <option selected value="new">Augmented</option>
                <option value="old">No Augment</option>
            </select>
            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•) */}
            {previewUrl && !predictedImageUrl && ( 
                <div style={{ marginTop: '10px' }}>
                    <h3>‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö</h3>
                    <img 
                        src={previewUrl} 
                        alt="Image Preview" 
                        style={{ maxWidth: '400px', maxHeight: '400px', display: 'block', border: '1px solid gray' }}
                    />
                    <button 
                        onClick={sendImageToBackend} 
                        disabled={isSending || !capturedBlob}
                        style={{ marginTop: '10px', backgroundColor: 'green', color: 'white' }}
                    >
                        {isSending ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•'}
                    </button>
                </div>
            )}
            
            {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°) */}
            {(predictedImageUrl || predictionMessage) && (
                <div style={{ marginTop: '20px', padding: '10px', border: '2px solid green' }}>
                    <h3>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ YOLO:</h3>
                    
                    {/* ** ‡πÅ‡∏ó‡πá‡∏Å <img> ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û Base64 ‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß ** */}
                    {predictedImageUrl && (
                        <>
                            <h4>‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</h4>
                            <img 
                                src={predictedImageUrl} 
                                alt="Predicted Image" 
                                style={{ maxWidth: '400px', maxHeight: '400px', display: 'block', border: '1px solid blue' }}
                            />
                            <button 
                                onClick={sendImageToBackend} 
                                disabled={isSending || !capturedBlob}
                                style={{ marginTop: '10px', backgroundColor: 'green', color: 'white' }}
                            >
                                {isSending ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'}
                            </button>
                        </>
                    )}

                    {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÄ‡∏ä‡πà‡∏ô "No object detected") */}
                    {predictionMessage && <p><strong>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:</strong> {predictionMessage}</p>}
                    
                </div>
            )}
        </div>
    );
}

export default SimpleImageUploader;