import React, { useState, useRef, useEffect } from 'react';

const API_ENDPOINT = 'http://127.0.0.1:5000/upload'; 

function SimpleImageUploader() {
    const [capturedBlob, setCapturedBlob] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î/‡∏ñ‡πà‡∏≤‡∏¢
    const [status, setStatus] = useState('‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'); // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    const [isCameraActive, setIsCameraActive] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á
    const [predictionResult, setPredictionResult] = useState(null); // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    const [isSending, setIsSending] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    const videoRef = useRef(null);
    const canvasRef = useRef(null);
    const streamRef = useRef(null);


    const stopCamera = () => {
        if (streamRef.current) {
            streamRef.current.getTracks().forEach(track => track.stop());
            streamRef.current = null;
        }
        setIsCameraActive(false);
    };

    const startCamera = async () => {
        stopCamera();
        setCapturedBlob(null);
        setPredictionResult(null);
        
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
            streamRef.current = stream;
            
            if (videoRef.current) {
                videoRef.current.srcObject = stream;
            }
            setIsCameraActive(true);
            setStatus('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß üì∑');
        } catch (err) {
            setStatus(`‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${err.message}`);
        }
    };

    // A. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    const handleFileUpload = (event) => {
        const file = event.target.files[0];
        if (file) {
            stopCamera();
            setCapturedBlob(file);
            setPredictionResult(null);
            setStatus(`‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á: ${file.name}`);
        }
    };

    // B. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
    const takePhoto = () => {
        const video = videoRef.current;
        const canvas = canvasRef.current;
        
        if (!video || !canvas) return;

        // 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î Canvas ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Video
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
        
        // 2. ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô Canvas ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå (Blob)
        canvas.toBlob((blob) => {
            // ‡πÅ‡∏õ‡∏•‡∏á Blob ‡πÄ‡∏õ‡πá‡∏ô File object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
            const file = new File([blob], "captured_image.jpeg", { type: "image/jpeg" });
            setCapturedBlob(file);
            stopCamera();
            setPredictionResult(null);
            setStatus('‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á üñºÔ∏è');
        }, 'image/jpeg', 0.95);
    };

    // ----------------------------------------------------------------------
    // ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend
    // ----------------------------------------------------------------------

    const sendImageToBackend = async () => {
        if (!capturedBlob) return;

        setIsSending(true);
        setStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û...');
        setPredictionResult(null);

        const formData = new FormData();
        // Key ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 'file' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Flask
        formData.append('file', capturedBlob, capturedBlob.name); 

        try {
            const response = await fetch(API_ENDPOINT, {
                method: 'POST',
                body: formData,
            });

            const result = await response.json();

            if (response.ok) {
                setPredictionResult(result.prediction || result.msg);
                setStatus(`‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ`);
            } else {
                setStatus(`‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.error || response.statusText}`);
                setPredictionResult(null);
            }
        } catch (error) {
            setStatus(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Server ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${error.message}`);
            setPredictionResult(null);
        } finally {
            setIsSending(false);
        }
    };
    
    // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    const previewUrl = capturedBlob ? URL.createObjectURL(capturedBlob) : null;

    // ----------------------------------------------------------------------
    // 4. ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (Render)
    // ----------------------------------------------------------------------
    
    return (
        <div>
            <h1>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏û (YOLO React)</h1>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
            <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> {status}</p>
            
            <hr />

            {/* ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå */}
            <h2>1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå</h2>
            <input 
                type="file" 
                accept="image/*" 
                onChange={handleFileUpload}
                disabled={isCameraActive || isSending}
            />

            <hr />

            {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á */}
            <h2>2. ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á</h2>
            
            {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á */}
            <button onClick={isCameraActive ? stopCamera : startCamera} disabled={isSending}>
                {isCameraActive ? '‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á' : '‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á'}
            </button>
            
            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û */}
            {isCameraActive && (
                <button onClick={takePhoto} disabled={isSending}>
                    ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
                </button>
            )}

            {/* ‡πÅ‡∏™‡∏î‡∏á Video Feed (‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î) */}
            <div style={{ marginTop: '10px' }}>
                <video 
                    ref={videoRef} 
                    autoPlay 
                    style={{ 
                        width: isCameraActive ? '100%' : '0', 
                        maxWidth: '400px',
                        display: isCameraActive ? 'block' : 'none',
                        border: '1px solid black' 
                    }}
                />
            </div>

            {/* Canvas ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û) */}
            <canvas ref={canvasRef} style={{ display: 'none' }} />

            <hr />

            {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á */}
            <h2>3. ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á & ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>
            
            {previewUrl && (
                <div style={{ marginTop: '10px' }}>
                    <h3>‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</h3>
                    <img 
                        src={previewUrl} 
                        alt="Image Preview" 
                        style={{ maxWidth: '400px', maxHeight: '400px', display: 'block', border: '1px solid gray' }}
                    />
                    
                    {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                    <button 
                        onClick={sendImageToBackend} 
                        disabled={isSending || !capturedBlob}
                        style={{ marginTop: '10px', backgroundColor: 'green', color: 'white' }}
                    >
                        {isSending ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•'}
                    </button>
                </div>
            )}
            
            {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ */}
            {predictionResult && (
                <div style={{ marginTop: '20px', padding: '10px', border: '2px solid green' }}>
                    <h3>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ YOLO:</h3>
                    <p>{predictionResult}</p>
                </div>
            )}
        </div>
    );
}

export default SimpleImageUploader;